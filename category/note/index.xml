<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note | Donald Blog</title>
    <link>https://kurimi1.github.io/category/note/</link>
      <atom:link href="https://kurimi1.github.io/category/note/index.xml" rel="self" type="application/rss+xml" />
    <description>note</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><lastBuildDate>Thu, 22 Jul 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://kurimi1.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url>
      <title>note</title>
      <link>https://kurimi1.github.io/category/note/</link>
    </image>
    
    <item>
      <title>golang的一些笔记</title>
      <link>https://kurimi1.github.io/post/go-base/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://kurimi1.github.io/post/go-base/</guid>
      <description>&lt;h2 id=&#34;多态的方法&#34;&gt;多态的方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;常用的interface接口&lt;/li&gt;
&lt;li&gt;利用反射reflect判断struct的name(或者直接获取xxx.(type))&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;限制并发&#34;&gt;限制并发&lt;/h2&gt;
&lt;p&gt;分为以下2个方面，最佳实践为协程数量&amp;gt;并发数量，通常起多少个协程就代表进行多少并发，因为go本身还有其他协程，因此协程数&amp;gt;并发数。&lt;/p&gt;
&lt;h3 id=&#34;限制创建协程数量&#34;&gt;限制创建协程数量&lt;/h3&gt;
&lt;p&gt;limiter在协程创建之前&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;limiter &amp;lt;- struct{}{}
go func
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;限制协程并发数量&#34;&gt;限制协程并发数量&lt;/h3&gt;
&lt;p&gt;limiter在协程之中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go func () {
    limiter &amp;lt;- struct{}{}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;释放limiter&#34;&gt;释放limiter&lt;/h3&gt;
&lt;p&gt;建议使用defer释放，当协程panic后保障释放&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go func () {
    defer func (){
        &amp;lt;-limiter
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;waitgroup&#34;&gt;waitgroup&lt;/h2&gt;
&lt;p&gt;wg.add()必须在协程前添加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;wg.Add(1)
go func () 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果在协程能add，会造成协程还没add，wait就先执行就直接退出了&lt;/p&gt;
&lt;h2 id=&#34;从chan中动态起协程仅适用于不需要退出的场景&#34;&gt;从chan中动态起协程，仅适用于不需要退出的场景&lt;/h2&gt;
&lt;p&gt;不能使用waitgroup，因为协程是动态增减的，会在某个瞬间为0
for chan里不能使用wg&lt;/p&gt;
&lt;p&gt;优点：不需要初始化协程数量，节约内存
缺点：无法使用wg，无法确定所有协程结束时间&lt;/p&gt;
&lt;h2 id=&#34;pcre正则比标准库快1倍多&#34;&gt;pcre正则比标准库快1倍多&lt;/h2&gt;
&lt;p&gt;rust nim最快，可以使用cgo调用&lt;/p&gt;
&lt;h2 id=&#34;程序并发设置&#34;&gt;程序并发设置&lt;/h2&gt;
&lt;p&gt;如果是多任务，直接给任务设置并发，任务内没必要再并发&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>redis note</title>
      <link>https://kurimi1.github.io/post/redis/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://kurimi1.github.io/post/redis/</guid>
      <description>&lt;h2 id=&#34;获取所有key&#34;&gt;获取所有key&lt;/h2&gt;
&lt;p&gt;keys *&lt;/p&gt;
&lt;h2 id=&#34;docker-安装redis&#34;&gt;docker 安装redis&lt;/h2&gt;
&lt;p&gt;持久化
docker run &amp;ndash;name some-redis -d -p 6379:6379 redis redis-server &amp;ndash;appendonly yes&lt;/p&gt;
&lt;h2 id=&#34;查看key的过期时间&#34;&gt;查看key的过期时间&lt;/h2&gt;
&lt;p&gt;ttl key&lt;/p&gt;
&lt;h2 id=&#34;查看key的类型&#34;&gt;查看key的类型&lt;/h2&gt;
&lt;p&gt;type key&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go test</title>
      <link>https://kurimi1.github.io/post/go-test/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://kurimi1.github.io/post/go-test/</guid>
      <description>&lt;h2 id=&#34;指定测试函数&#34;&gt;指定测试函数&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;go test -v -test.run xxxx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用正则指定&lt;/p&gt;
&lt;p&gt;go test -run ^xxx&amp;amp;&lt;/p&gt;
&lt;h2 id=&#34;基准测试&#34;&gt;基准测试&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;go test -benchmem -run=^&amp;amp; -bench ^xxx$
必须使用-run=^&amp;amp;才能指定测试某个基准测试，否在单测基测都会执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;并发基准测试&#34;&gt;并发基准测试&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;b.Setparallelism(2) // 设置并发数量2x核心数
b.Runparallel(func(pb *testing.PB) {
    for pb.Next() {
        xx()
    }
})
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
